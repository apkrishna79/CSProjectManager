@page
@model RegisterModel
@{
    ViewData["Title"] = "Register";
}

<h2>Register a New Student</h2>

@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger">
        @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
        {
            <p>@error.ErrorMessage</p>
        }
    </div>
}

<form method="post">
    <div>
        <label>Email</label>
        <input asp-for="Email" type="email" maxlength="255" />
    </div>

    <div>
        <label>Password</label>
        <input asp-for="Password" type="password" required />
    </div>

    <div>
        <label>First Name</label>
        <input asp-for="FirstName" required maxlength="100" />
    </div>

    <div>
        <label>Last Name</label>
        <input asp-for="LastName" required maxlength="100" />
    </div>

    <div>
        <label>Enrolled Classes</label>
        <select id="enrolledClasses" name="EnrolledClasses" multiple="multiple" style="width: 100%;"></select>
    </div>

    <div>
        <label>Team</label>
        <select id="team" name="Teams" multiple="multiple" style="width: 100%;"></select>
    </div>

    <button type="submit">Register</button>
</form>

<!--import select2 functionality-->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js" defer></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" />

<script>
    $(document).ready(function () {
        // select2 cannot filter from ajax queries, item must have local data
        // perform queries and store results in these arrays
        let classData = [];
        let teamData = [];
        let selectedClasses = [];

        // Fetch all classes initially and store them
        $.ajax({
            url: '/Register?handler=GetClasses',
            dataType: 'json',
            success: function (data) {
                // Convert fetched data into Select2-compatible format
                classData = data.map(item => ({ id: item.name, text: item.name }));
                initializeClassDropdown();
            }
        });

        // Fetch teams for the selected classes
        function fetchTeamsForClasses(newSelectedClasses) {
            let removedClasses = selectedClasses.filter(cls => !newSelectedClasses.includes(cls));

            // Remove teams belonging to deselected classes
            teamData = teamData.filter(team => {
                let className = team.text.match(/\((.*?)\)$/)?.[1]; // Extract class name from "Team (Class)"
                return className && !removedClasses.includes(className);
            });
            
            // Explicitly clear the team dropdown before reinitializing
            $('#team').empty().trigger('change');

            $.ajax({
                type: 'get',
                url: '/Register?handler=GetTeamsForClasses',
                data: { "cs": newSelectedClasses },
                traditional: true,
                success: function (data) {
                    let newTeams = data.map(item => ({ id: item.name, text: item.name }));

                    // Avoid duplicate teams in the dropdown
                    teamData = [...teamData, ...newTeams.filter(team => !teamData.some(t => t.id === team.id))];

                    initializeTeamDropdown(); // Reinitialize dropdown with updated team data
                }
            });

            // Update selected classes for future tracking
            selectedClasses = newSelectedClasses;
        }

        // Initialize class dropdown
        function initializeClassDropdown() {
            $('#enrolledClasses').select2({
                tags: true,
                placeholder: "Select or add a class",
                data: classData,
                createTag: (params) => {
                    let term = $.trim(params.term);

                    // Prevent adding an empty or duplicate class
                    if (!term || classData.some(item => item.text.toLowerCase() === term.toLowerCase())) return null;
                    if (term.length > 100) return null;

                    return { id: term, text: `Add New Class: ${term}`, newTag: true };
                },
                templateSelection: (data) => data.newTag ? data.id : data.text,
                insertTag: (data, tag) => {
                    // Ensure new classes appear in the dropdown if not already present
                    if (!data.some(existingTag => existingTag.text === tag.text)) {
                        data.unshift(tag);
                    }
                }
            });

            $('#enrolledClasses').on('change', function () {
                let newSelectedClasses = $(this).val() || [];
                fetchTeamsForClasses(newSelectedClasses);
            });

            // Trigger an initial team fetch to load any pre-selected classes
            $('#enrolledClasses').trigger('change');
        }

        // Initialize team dropdown
        function initializeTeamDropdown() {
            $('#team').select2({
                tags: true,
                placeholder: "Select or add a team",
                data: selectedClasses.length === 0 ? [{ id: 'no-class', text: 'Please select a class', disabled: true }] : teamData,
                createTag: function (params) {
                    let term = $.trim(params.term);
                    if (!term) return null;

                    // Show a message when no class is selected
                    if (selectedClasses.length === 0) {
                        return [{ id: 'no-class', text: 'Please select a class', disabled: true }]; // Prevents adding a team when no class is selected
                    }

                     // Create new team options for each selected class
                    return selectedClasses.map(cls => ({
                        id: `${term} (${cls})`,
                        text: `Add New Team: ${term} (${cls})`,
                        newTag: true
                    }));
                },
                insertTag: function (data, newTags) {
                    newTags.forEach(tag => {
                        if (!data.some(existingTag => existingTag.text === tag.text)) {
                            console.log("tag pushed");
                            data.push(tag);
                        }
                    });
                },
                templateSelection: function (data) {
                    return data.newTag ? data.id : data.text;
                }
            });

            // Ensure dropdown updates when clicking on the field
            $('#team').on('select2:open', function () {
                let select2Data = $('#team').data('select2');
                let $options = select2Data.$results.find('.select2-results__option');

                // Remove duplicate "Please select a class" messages before adding a new one
                $options.filter(function () {
                    return $(this).text() === "Please select a class";
                }).remove();

                // If no class is selected, show the message
                if (selectedClasses.length === 0) {
                    // Add only if it does not already exist
                    if ($('#team option[value="no-class"]').length === 0) {
                        let $option = $('<option>')
                            .val('no-class')
                            .text('Please select a class')
                            .prop('disabled', true);

                        $('#team').append($option).trigger('change');
                    }
                }
            });
        }
    });

</script>

