@page
@model RegisterModel
@{
    ViewData["Title"] = "Register";
}

<h2>Register a New Student</h2>

<form method="post">
    <div>
        <label>Username</label>
        <input asp-for="Username" required maxlength="100" />
    </div>

    <div>
        <label>Password</label>
        <input asp-for="Password" type="password" required />
    </div>

    <div>
        <label>First Name</label>
        <input asp-for="FirstName" required maxlength="100" />
    </div>

    <div>
        <label>Last Name</label>
        <input asp-for="LastName" required maxlength="100" />
    </div>

    <div>
        <label>Contact Email</label>
        <input asp-for="ContactEmail" type="email" maxlength="255" />
    </div>

    <div>
        <label>Enrolled Classes</label>
        <select id="enrolledClasses" name="EnrolledClasses" multiple="multiple" style="width: 100%;"></select>
    </div>

    <div>
        <label>Team</label>
        <select id="team" name="Teams" multiple="multiple" style="width: 100%;"></select>
    </div>

    <button type="submit">Register</button>
</form>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js" defer></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" />

<script>
        $(document).ready(function () {
        let classData = [];
        let teamData = [];
        let selectedClasses = [];

        // Fetch all classes initially and store them
        $.ajax({
            url: '/Register?handler=GetClasses',
            dataType: 'json',
            success: function (data) {
                classData = data.map(item => ({ id: item.name, text: item.name }));
                initializeClassDropdown();
            }
        });

        // Fetch teams for the selected classes
        function fetchTeamsForClasses(selectedClasses) {
            console.log("Selected Classes:", selectedClasses);
            $.ajax({
                type: 'get',
                url: '/Register?handler=GetTeamsForClasses',
                data: { "cs": selectedClasses },
                traditional: true,
                success: function (data) {
                    console.log("Team data received");
                    teamData = data.map(item => ({ id: item.name, text: item.name }));
                    initializeTeamDropdown();
                }
            });
        }

        // Initialize class dropdown
        function initializeClassDropdown() {
            $('#enrolledClasses').select2({
                tags: true,
                placeholder: "Select or add a class",
                data: classData,
                createTag: (params) => {
                    let term = $.trim(params.term);
                    if (!term || classData.some(item => item.text.toLowerCase() === term.toLowerCase())) return null;
                    if (term.length > 100) return null;
                    return { id: term, text: `Add New Class: ${term}`, newTag: true };
                },
                templateSelection: (data) => data.newTag ? data.id : data.text,
                insertTag: (data, tag) => {
                    if (!data.some(existingTag => existingTag.text === tag.text)) {
                        data.unshift(tag);
                    }
                }
            });

            $('#enrolledClasses').on('change', function () {
                selectedClasses = $(this).val() || [];
                fetchTeamsForClasses(selectedClasses);
            });

            $('#enrolledClasses').trigger('change');
        }

        // Initialize team dropdown
        function initializeTeamDropdown() {
            $('#team').select2({
                tags: true,
                placeholder: "Select or add a team",
                data: teamData,
                createTag: function (params) {
                    let term = $.trim(params.term);
                    if (!term || selectedClasses.length === 0) return null;

                    let newTags = [];
                    selectedClasses.forEach(cls => {
                        let fullTeamName = `${term} (${cls})`;

                        // Check if this team-class combination already exists
                        if (!teamData.some(item => item.text === fullTeamName)) {
                            newTags.push({ id: fullTeamName, text: `Add New Team: ${fullTeamName}`, newTag: true });
                        }
                    });

                    return newTags.length > 0 ? newTags : null;
                },
                insertTag: function (data, newTags) {
                    newTags.forEach(tag => {
                        if (!data.some(existingTag => existingTag.text === tag.text)) {
                            data.push(tag);
                        }
                    });
                },
                templateSelection: function (data) {
                    return data.newTag ? data.id : data.text;
                }
            });
        }

    });
</script>

